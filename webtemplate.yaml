Parameters:
  KeyPair:
    Description: Name of an existing EC2 KeyPair to enable SSH access into the server
    Type: AWS::EC2::KeyPair::KeyName
  VpcId:
    Description: Enter the VPC ID
    Type: AWS::EC2::VPC::Id
  SubnetId:
    Description: Enter the Subnet ID
    Type: AWS::EC2::Subnet::Id

Mappings:
  RegionAMIMap:
    eu-west-2:
      AMI: ami-00a1270ce1e007c27
    eu-west-1:
      AMI: ami-0ce71448843cb18a1

Resources:
  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref SubnetId
  LoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: #required
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
      LoadBalancerArn: !Ref LoadBalancer #required
      Port: 80 #required
      Protocol: HTTP #required
  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs
      LaunchConfiguration: !Ref LaunchConfiguration
      MinSize: 1
      MaxSize: 3
      TargetGroupARNs:
        - !Ref TargetGroup
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Install php and httpd
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              php: []
          files:
            /var/www/html/index.php:
              content: !Sub |
                <?php print "Hello world Fernando was here!"; ?>
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      KeyName: !Ref KeyPair
      InstanceType: t2.micro
      SecurityGroups: #if fails check if it is SecurityGroupIds
        - !Ref EC2SecurityGroup
      ImageId:
        Fn::FindInMap:
        - RegionAMIMap
        - !Ref AWS::Region
        - AMI
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash -xe
            # Ensure AWS CFN Bootstrap is the latest
            yum install -y aws-cfn-bootstrap
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: EC2 Security Group
  EC2InboundRule: 
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId:
        !GetAtt
        - ALBSecurityGroup
        - GroupId
      GroupId:
        !GetAtt
        - EC2SecurityGroup
        - GroupId 

Outputs:
  WebDNSName:
    Description: Public IP of the Load Balancer
    Value: !Sub 'http://${LoadBalancer.DNSName}'